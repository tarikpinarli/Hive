#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_EVENTS 1000
#define MAX_LINE_LENGTH 512

typedef struct {
    char summary[256];
    struct tm start_tm;
    struct tm end_tm;
    time_t start_utc;
} Event;

int parse_dt_to_tm(const char *dt_str, struct tm *tm_out) {
    if (strlen(dt_str) < 16) return 0;
    char buf[5];
    memset(tm_out, 0, sizeof(struct tm));

    strncpy(buf, dt_str, 4); buf[4] = '\0';
    tm_out->tm_year = atoi(buf) - 1900;

    strncpy(buf, dt_str + 4, 2); buf[2] = '\0';
    tm_out->tm_mon = atoi(buf) - 1;

    strncpy(buf, dt_str + 6, 2); buf[2] = '\0';
    tm_out->tm_mday = atoi(buf);

    strncpy(buf, dt_str + 9, 2); buf[2] = '\0';
    tm_out->tm_hour = atoi(buf);

    strncpy(buf, dt_str + 11, 2); buf[2] = '\0';
    tm_out->tm_min = atoi(buf);

    strncpy(buf, dt_str + 13, 2); buf[2] = '\0';
    tm_out->tm_sec = atoi(buf);

    tm_out->tm_isdst = -1;
    return 1;
}

void add_timezone_offset(struct tm *time, int offset_hours) {
    time_t raw = timegm(time);
    raw += offset_hours * 3600;
    *time = *gmtime(&raw);
}

int compare_events(const void *a, const void *b) {
    Event *ea = (Event *)a;
    Event *eb = (Event *)b;
    return (ea->start_utc > eb->start_utc) - (ea->start_utc < eb->start_utc);
}

int process_calendar(const char *filename, time_t now, time_t one_month_later, Event *events, int event_count) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "❌ Error opening file: %s\n", filename);
        return event_count;
    }

    char line[MAX_LINE_LENGTH];
    int inside_event = 0;

    char summary[256] = "";
    char dtstart[32] = "";
    char dtend[32] = "";

    while (fgets(line, sizeof(line), file)) {
        line[strcspn(line, "\r\n")] = 0;

        if (strcmp(line, "BEGIN:VEVENT") == 0) {
            inside_event = 1;
            summary[0] = '\0';
            dtstart[0] = '\0';
            dtend[0] = '\0';
        } else if (strcmp(line, "END:VEVENT") == 0) {
            inside_event = 0;

            struct tm start_tm, end_tm;
            if (parse_dt_to_tm(dtstart, &start_tm) && parse_dt_to_tm(dtend, &end_tm)) {
                time_t start_utc = timegm(&start_tm);
                if (start_utc >= now && start_utc <= one_month_later && event_count < MAX_EVENTS) {
                    add_timezone_offset(&start_tm, 3);
                    add_timezone_offset(&end_tm, 3);

                    Event e;
                    strncpy(e.summary, summary, sizeof(e.summary));
                    e.start_tm = start_tm;
                    e.end_tm = end_tm;
                    e.start_utc = start_utc;
                    events[event_count++] = e;
                }
            }
        }

        if (inside_event) {
            if (strncmp(line, "DTSTART:", 8) == 0) {
                strncpy(dtstart, line + 8, sizeof(dtstart));
            } else if (strncmp(line, "DTEND:", 6) == 0) {
                strncpy(dtend, line + 6, sizeof(dtend));
            } else if (strncmp(line, "SUMMARY:", 8) == 0) {
                strncpy(summary, line + 8, sizeof(summary));
            }
        }
    }

    fclose(file);
    return event_count;
}

void print_events(const Event *events, int count, const char *title) {
    printf("\n📂 Sorted Events from: %s\n", title);
    for (int i = 0; i < count; i++) {
        printf("Summary: %s\n", events[i].summary);
        printf("Start:   %04d-%02d-%02d %02d:%02d GMT+03:00\n",
               events[i].start_tm.tm_year + 1900, events[i].start_tm.tm_mon + 1,
               events[i].start_tm.tm_mday, events[i].start_tm.tm_hour, events[i].start_tm.tm_min);
        printf("End:     %04d-%02d-%02d %02d:%02d GMT+03:00\n",
               events[i].end_tm.tm_year + 1900, events[i].end_tm.tm_mon + 1,
               events[i].end_tm.tm_mday, events[i].end_tm.tm_hour, events[i].end_tm.tm_min);
        printf("-----------------------------\n");
    }
}

int main() {
    time_t now = time(NULL);
    time_t one_month_later = now + (30 * 24 * 60 * 60);

    struct tm now_tm = *gmtime(&now);
    add_timezone_offset(&now_tm, 3);

    printf("📅 Events from %04d-%02d-%02d to one month later (GMT+03:00):\n\n",
           now_tm.tm_year + 1900, now_tm.tm_mon + 1, now_tm.tm_mday);

    Event events1[MAX_EVENTS];
    Event events2[MAX_EVENTS];
    int count1 = 0, count2 = 0;

    count1 = process_calendar("calendar.ics", now, one_month_later, events1, count1);
    count2 = process_calendar("calendar2.ics", now, one_month_later, events2, count2);

    qsort(events1, count1, sizeof(Event), compare_events);
    qsort(events2, count2, sizeof(Event), compare_events);

    print_events(events1, count1, "calendar.ics");
    print_events(events2, count2, "calendar2.ics");

    return 0;
}
